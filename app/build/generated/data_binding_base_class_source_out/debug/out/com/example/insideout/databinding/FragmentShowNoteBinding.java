// Generated by view binder compiler. Do not edit!
package com.example.insideout.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.recyclerview.widget.RecyclerView;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.insideout.R;
import com.google.android.material.button.MaterialButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class FragmentShowNoteBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final MaterialButton exitNoteButton;

  @NonNull
  public final ConstraintLayout layoutNoteRecycleView;

  @NonNull
  public final RecyclerView noteRecycleView;

  @NonNull
  public final ConstraintLayout noteShowExitButtonLayout;

  @NonNull
  public final ConstraintLayout noteShowFragmentContainer;

  @NonNull
  public final View noteShowLine;

  private FragmentShowNoteBinding(@NonNull ConstraintLayout rootView,
      @NonNull MaterialButton exitNoteButton, @NonNull ConstraintLayout layoutNoteRecycleView,
      @NonNull RecyclerView noteRecycleView, @NonNull ConstraintLayout noteShowExitButtonLayout,
      @NonNull ConstraintLayout noteShowFragmentContainer, @NonNull View noteShowLine) {
    this.rootView = rootView;
    this.exitNoteButton = exitNoteButton;
    this.layoutNoteRecycleView = layoutNoteRecycleView;
    this.noteRecycleView = noteRecycleView;
    this.noteShowExitButtonLayout = noteShowExitButtonLayout;
    this.noteShowFragmentContainer = noteShowFragmentContainer;
    this.noteShowLine = noteShowLine;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static FragmentShowNoteBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static FragmentShowNoteBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.fragment_show_note, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static FragmentShowNoteBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.exitNoteButton;
      MaterialButton exitNoteButton = ViewBindings.findChildViewById(rootView, id);
      if (exitNoteButton == null) {
        break missingId;
      }

      id = R.id.layout_note_recycleView;
      ConstraintLayout layoutNoteRecycleView = ViewBindings.findChildViewById(rootView, id);
      if (layoutNoteRecycleView == null) {
        break missingId;
      }

      id = R.id.note_recycleView;
      RecyclerView noteRecycleView = ViewBindings.findChildViewById(rootView, id);
      if (noteRecycleView == null) {
        break missingId;
      }

      id = R.id.noteShow_exitButton_Layout;
      ConstraintLayout noteShowExitButtonLayout = ViewBindings.findChildViewById(rootView, id);
      if (noteShowExitButtonLayout == null) {
        break missingId;
      }

      ConstraintLayout noteShowFragmentContainer = (ConstraintLayout) rootView;

      id = R.id.noteShow_Line;
      View noteShowLine = ViewBindings.findChildViewById(rootView, id);
      if (noteShowLine == null) {
        break missingId;
      }

      return new FragmentShowNoteBinding((ConstraintLayout) rootView, exitNoteButton,
          layoutNoteRecycleView, noteRecycleView, noteShowExitButtonLayout,
          noteShowFragmentContainer, noteShowLine);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
